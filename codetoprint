#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> books(n);
    for (int i = 0; i < n; i++)
        cin >> books[i];

    int x, k;
    cin >> x >> k;

    // Binary search to find insertion point
    int left = 0, right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (books[mid] < x)
            left = mid + 1;
        else
            right = mid - 1;
    }

    // Now, right is index just smaller than x, left is just greater or equal to x
    int l = right;
    int r = left;

    vector<int> result;

    // Pick k closest
    while (k-- > 0) {
        if (l < 0) {
            result.push_back(books[r++]);
        } else if (r >= n) {
            result.push_back(books[l--]);
        } else if (abs(books[l] - x) <= abs(books[r] - x)) {
            result.push_back(books[l--]);
        } else {
            result.push_back(books[r++]);
        }
    }

    sort(result.begin(), result.end());

    for (int i = 0; i < result.size(); i++) {
        cout << result[i];
        if (i != result.size() - 1)
            cout << " ";
    }

    return 0;
}