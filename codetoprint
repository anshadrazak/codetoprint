#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

// Function to find index of the closest element using binary search
int findClosestIndex(const vector<int>& arr, int x) {
    int low = 0, high = arr.size() - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == x)
            return mid;
        else if (arr[mid] < x)
            low = mid + 1;
        else
            high = mid - 1;
    }
    // When not found, 'low' is the insertion point
    if (low == 0) return 0;
    if (low == arr.size()) return arr.size() - 1;
    // Return whichever is closer
    return (abs(arr[low] - x) < abs(arr[low - 1] - x)) ? low : low - 1;
}

int main() {
    int n;
    cin >> n;
    vector<int> books(n);
    for (int i = 0; i < n; i++)
        cin >> books[i];

    int x, k;
    cin >> x >> k;

    int index = findClosestIndex(books, x);

    // Two pointers to expand around the closest index
    int left = index - 1, right = index + 1;
    vector<int> result;
    result.push_back(books[index]);

    while (result.size() < k) {
        if (left >= 0 && right < n) {
            if (abs(books[left] - x) <= abs(books[right] - x))
                result.push_back(books[left--]);
            else
                result.push_back(books[right++]);
        } else if (left >= 0)
            result.push_back(books[left--]);
        else if (right < n)
            result.push_back(books[right++]);
        else
            break;
    }

    sort(result.begin(), result.end()); // Output should be sorted
    for (int i = 0; i < result.size(); i++) {
        cout << result[i];
        if (i != result.size() - 1) cout << " ";
    }

    return 0;
}
